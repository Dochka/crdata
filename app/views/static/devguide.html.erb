<% content_for(:intro) do %>
<h1>How to prepare R scripts for CRdata</h1>
<h2>Introduction</h2>
<p> CRdata is a web-based framework to submit, share, run and view R scripts and results. CRdata enables users to submit their R code for either their own use, or share with the community (public or within a specific group). CRdata enables developers to write scripts, upload data files, specify input parameters , and format the output results onto a web page (using HTML). It is highly recommended that developers test their scripts locally before submitting to CRdata. In addition to reading this document, please read the <%= link_to('CRdata User Guide', userguide_path, :target => 'help') %>.
</p>
<p>CRdata will automatically pass user-specified input values to your R script. But you need to tell CRdata what outputs to present to the user. To do this, you need to insert HTML/XML style &#146;tags&#146; that mark the beginning and end of output commands in your code. You will also need to remove (comment out) commands relating to control of graphics devices.</p>
<% end -%>

<% content_for(:content) do %>
 
<h3>Preparing your Script for CRdata</h3>
<ul class="bullet_list"><li>Remove all code relating to control of graphics devices (e.g. dev.new, dev.off, windows, X11).</li>
<li>If your code refers to other R scripts (e.g. functions), include the relevant code within the submitted script.</li>
<li>Do not attempt to install packages within your code. CRdata automatically loads and updates all R and Bioconductor packages. However, some package installations or updates may fail due to dependencies etc. If you find that a package you wish to use is not already installed on CRdata, you can install the package by following	<a href='/devguide#add_r_packages'> Adding new R packages to CRdata</a>.</li>
<li>Ensure that all functions called within your script are either part of an installed package, or included within the script.</li>
<li>If you intend to make your script available to Guest Users, make sure your script does not attempt to save any internal variables.  
<p>- Files in the Guest User directory may be deleted without notice. <br />
- Registered users can save interval variables (R objects) for later use (e.g. in a data processing pipeline).</p></li>
<li>CRdata's free processor queue currently only runs Unix processing nodes. Windows-specific R commands (e.g. to read Excel worksheets) will not work on CRdata. 
<p>-You can purchase EC2 Windows Instances, configure them as CRdata R worker nodes, and attach them to your private CRdata queues.  <br />
- If there is enough demand (and funding!) we will be happy to add Windows nodes to our free service.</p></li></ul>

<h3>Inputting data in CRdata</h3>
<p>Input to a CRdata script can come in two ways:</p>
<ul class="bullet_list"><li> Upload data files to be used by the script</li>
<li>Specify parameters that can be changed in runtime during execution of the script</li></ul>
<p>The script developer must specify the input variables. Do not assign hard-coded values to the variables that are expected to be changed dynamically by the user of the script. The dynamic values of variables in the script can be one of the following data types:</p>
<ul class="bullet_list"><li>String</li>
<li>Dataset (a file)</li>
<li>Integer</li>
<li>Float (floating point or real value)</li>
<li>Enumeration (user of the script picks one of integer values in a range)</li>
<li>Boolean (TRUE or FALSE)</li>
<li>List (user of the script picks one of the values in a comma-separated list of possible strings, integers or floating point)</li></ul>
<p>The names of variables in the script MUST match corresponding names you provide in the CRdata graphical interface when uploading the script.</p> 

<h3>Outputting results in CRdata</h3>
<p>Standard R scripts that one would run on a desktop computer must be adapted by embedding a series of CRdata tags in the R script. These tags direct CRdata to produce web-based HTML output results. This page provides guidance about the available CRdata tags, and how to instrument R scripts with the tags to display the desired output. Internally CRdata tags are used to generate HTML output using the <a href='http://cran.r-project.org/web/packages/R2HTML/index.html'>R2HTML package</a>.</p>



<h2>The CRdata tag library</h2>
<p>All CRdata script output commands must be enclosed within special Tag pairs. Each tag must start on a new line. The goal of the CRdata tagging system is to be non-intrusive, and enable you to run your R scripts in both your desktop environment as well as in CRdata. In order to achieve this objective, all CRdata tags are prefixed with &#146;<strong>#</strong>&#146; (comments in R), and hence can be ignored when running the same script on your desktop. As a general rule, CRdata tags are only used to specify and format HTML output for your R scripts.</p>

<p><strong>crdata_title</strong> - can be used in your script in order display a header in your HTML output. The syntax is: </p>
<code>#&lt;crdata_title&gt;your_text&lt;/crdata_title&gt; </code>

<p><strong>crdata_text</strong> - can used to display some arbitrary text in your HTML output. The syntax is: </p>
<code>#&lt;crdata_text&gt;some_text&lt;/crdata_text&gt; </code>

<p><strong>crdata_object</strong> - can be used to output the values of R variables such as a tables (actually, anything that has some value which you would like to list in the HTML report). The elements of variables output in this way can be integer, string, floating-point/real, boolean, etc. If 'some_object' is a variable in your internal code variable, the syntax to output its value is: </p>
<code>#&lt;crdata_object&gt;some_object&lt;/crdata_object&gt;</code> 

<p><strong>crdata_section</strong> - can be used to draw a horizontal separator line in the HTML output, this is similar in function to &lt;hr&gt; in standard HTML. The syntax is:</p>
<code>#&lt;crdata_section/&gt; </code>

<p><strong>crdata_empty_line</strong> - can be used to put empty space or a line break in the HTML output.  This is similar in function to &lt;br&gt; in standard HTML. The syntax is:</p>
<code>#&lt;crdata_empty_line/&gt; </code>


<p><strong>crdata_image</strong> - can be used to enclose any drawing or graphical outputs. You must precede each new graphical output with the #&lt;crdata_image&gt; tag and end it with #&lt;/crdata_image&gt;. In addition, you need to put each graphics command inside a print() statement. For example, the commands "plot(x)" followed by "lines(x)" become: 

<code>#&lt;crdata_image&gt;<br />
print(plot(x))<br />
print(lines(x))<br />
#&lt;/crdata_image&gt;</code><br />

<h2>Saving R script output files for pipeline processing</h2>
<p>CRData allows scripts to save output files so that output from one script can be input to another script as a dataset. This involves 2 main steps:</p>
<ul class="bullet_list">
	<li>(A) A script can write intermediate results files to CRdata</li>
	<li>(B) Another script can read the output generated by step (A) as an input dataset file</li>
</ul>
<p>For instance, lets say you have a script like following:</p>
<code>
TFs <- read.table(coTFs, sep="\t", header=TRUE)<br />
#&lt;crdata_object&gt;TFs&lt;/crdata_object&gt;<br />
write.table(TFs,file="List_Data.txt") 
</code>
<p>The above script when run as a job outputs the file <strong>List_Data.txt</strong>. Importantly, note how the object "TFs" is declared using CRdata tags before the write.table() command. CRData automatically uploads all the files output by your script to your private data folder. Before uploading, the files are renamed with a prefix to identify the job that output the data. For instance if the job ID was 587, then <strong>List_Data.txt</strong> is renamed as <strong>job-0000000587-List-Data.txt</strong>. </p>
<p>Note the filename is prefixed with "job-<JOB_ID>-" (to ensure uniqueness of name across jobs) and the UNDERSCORE in the name is replaced with a HYPHEN. In addition any file that is desired to be uploaded as dataset MUST NOT have following extensions as these are considered potentially as part of results displayed to user: </p>
<ul class="bullet_list">
	<li>jpg, png, gif, html, htm, js, css, pdf, log, r, rb, java, php, py, pyc</li>
</ul>
<p>After running the above script, if you go to your Private Files in the Data tab, you see the output file listed as above. Now the file can be loaded into another script as a 'normal' dataset input file (the user will choose this file at run time, so the name change shouldn't matter).</p>


<br />
<h2 id='add_r_packages'> Adding new R packages to CRdata </h2>

<p>CRdata automatically updates its R and Bioconductor libraries regularly. The only packages not installed and updated are those that have complex dependencies on non-R libraries and cannot be auto installed (or packages that perform interactive graphics and other functions not compatible with our web-service). So you should find all packages compatible with CRdata already pre-installed and up-to-date. In rare cases, the author of a new package not yet publicly available may wish to use the package with CRdata.</p>

<p>CRData enables users to upload new R packages. You have to create an R Script and - <em>at the time of submitting the script to CRdata</em> - tag it with the reserved tag, <strong>'INSTALL SCRIPT'</strong>. Once you submit a job with that script you'll notice that the job status is set to PENDING. The site admin will receive an email notification about this job. The site admin will test the job and will either approve and disapprove it. If approved, then the Job becomes DONE (with a successful flag), if not it's FAILED. In either case, the script owner will receive an email notification about it. See below for an illustration of a sample installation script that assumes CRData doesn't have the R package "packageName" pre-installed, and attempts to install the library, and test it.</p>

<code>
# Not Run <br />
install.packages(packageName)    # packageName is the name of the package being installed <br />
library(packageName) <br />      # call the package and test that it installed correctly <br />
aPackageCommand()                # sample command from the package to check it executes correctly  <br />
</code>

  
<h2>Illustrated examples for CRdata instrumented code</h2> 
<p>Note any of the following scripts are runnable code provided to developers in order to illustrate how to use CRdata and provide guidance through working examples. A developer can copy the code given in each example, and try running them in CRdata enviroment. These scripts can also be run in your local R environment without any side effects as long there is a mechanism in place to input any required input data. Hopefully these examples will provide a better understanding of how to embed such tags in your own scripts for CRdata.</p>


<p>Example: Output title and some arbitrary text in HTML output, no input parameters </p>
<code>#&lt;crdata_title&gt;CRdata Output Title 1&lt;/crdata_title&gt;<br />
#&lt;crdata_text&gt;Arbitrary Text 1&lt;/crdata_text&gt;<br />
#&lt;crdata_title&gt;CRdata Output Title 2&lt;/crdata_title&gt;<br />
#&lt;crdata_text&gt;Arbitrary Text 2&lt;/crdata_text&gt;</code>

<p>Example: Output HTML title, some arbitrary text with some formatting such as empty space and horizontal line separator, no input parameters </p>
<code>#&lt;crdata_title&gt;Title 01&lt;/crdata_title&gt;<br /> 
#&lt;crdata_text&gt;Arbitrary Text 01&lt;/crdata_text&gt;<br /> 
#&lt;crdata_title&gt;Title 02&lt;/crdata_title&gt;<br /> 
#&lt;crdata_text&gt;An empty line should follow&lt;/crdata_text&gt;<br /> 
#&lt;crdata_empty_line/&gt;<br />
#&lt;crdata_text&gt;Arbitrary Text 03&lt;/crdata_text&gt;<br /> 
#&lt;crdata_section/&gt;<br />
#&lt;crdata_text&gt;Arbitrary Text 04&lt;/crdata_text&gt;<br /> 
</code>


<p>Example: Output HTML title, arbitrary text with formatting, and object values such as arrays using crdata_object tag. Note that when run on your local desktop all lines prefixed by # are ignored and treated as comments by your R interpreter. In the example below values of d00 and d01 (which are arrays) are output in HTML format. This script requires no input parameters. </p><br />
<code> 
#&lt;crdata_title&gt;CRdata Output Example 1&lt;/crdata_title&gt;<br /> 
#&lt;crdata_text&gt;Numbers 0 thru 5&lt;/crdata_text&gt;<br /> 
d00 = c(0,1,2,3,4,5) <br /> 
#&lt;crdata_object&gt;d00&lt;/crdata_object&gt;<br /> 
#&lt;crdata_title&gt;CRdata Output example 2&lt;/crdata_title&gt;<br /> 
#&lt;crdata_text&gt;An empty line should follow&lt;/crdata_text&gt;<br /> 
#&lt;crdata_empty_line/&gt;<br />
#&lt;crdata_text&gt;Numbers 6 thru 10&lt;/crdata_text&gt;<br /> 
d01 = c(6,7,8,9,10) <br />
#&lt;crdata_object&gt;d01&lt;/crdata_object&gt;<br /> 
#&lt;crdata_section/&gt;<br />
#&lt;crdata_text&gt;Arbitrary Text 04&lt;/crdata_text&gt;<br /> 
</code>


<p>Example: Outputs some graphical plots and summary of dataframes and matrices. Note that when run on your local desktop all code prefixed by # are ignored and treated as comments by your R interpreter. The example below, when run on local desktop, would show the graphical output in a console, whereas when run in CRdata environment would generate images as files that are then placed into an HTML/web page. This is a self contained example that doesn't require any input parameters. </p><br />
<code> 
#&lt;crdata_title&gt;This is a CRdata run report&lt;/crdata_title&gt;<br /> 
tmp <- as.data.frame(matrix(rnorm(100),ncol=10)) <br />
#&lt;crdata_object&gt;tmp&lt;/crdata_object&gt;<br /> 
#&lt;crdata_section/&gt;<br />
#&lt;crdata_image caption="First Graph"&gt; <br />
print(plot(tmp))<br />
#&lt;/crdata_imaget&gt; <br />
#&lt;crdata_section/&gt;<br />
#&lt;crdata_image caption="Second Graph"&gt;print(plot(tmp)) <br />
#&lt;/crdata_imaget&gt;<br />
#&lt;crdata_section/&gt;<br />
#&lt;crdata_image caption="Third Graph">print(plot(tmp))&lt;/crdata_imaget&gt; <br />
#next: same plot without a title <br />
#&lt;crdata_image&gt;print(plot(tmp))&lt;/crdata_imaget&gt;<br />
</code>


<p>Example: Another graphical plot output example. This is a self contained example that doesn't require any input parameters.<p><br />
<code> 
#&lt;crdata_text&gt;Print of an R vector&lt;/crdata_text&gt;<br /> 
x = c(1,4,9,15,27) <br />
#&lt;crdata_object&gt;x&lt;/crdata_object&gt;<br /> 
#&lt;crdata_text&gt;Plot of an R vector&lt;/crdata_text&gt;<br /> 
#&lt;crdata_image&gt <br />
print(plot(x)) <br />
print(lines(x))<br />
#&lt;/crdata_image&gt<br />
</code>

<p>Example: Integer input parameter example. This example assumes that the variable <strong>aNumber</strong> is specified in input form as INTEGER/NUMBER by the developer when uploading the script. It also assumes that the user of the script, inputs value for <strong>aNumber</strong> variable when running the script using CRdata. In order to run the script locally, you must somehow input the value of <strong>aNumber</strong> variable. Otherwise R interpreter will throw an error: </p>
<code> 
#&lt;crdata_text&gt;Arbitrary Text 00&lt;/crdata_text&gt;<br /> 
z <- rnorm(aNumber) <br />
#&lt;crdata_object&gt;z&lt;/crdata_object&gt;<br /> 
#&lt;crdata_text&gt;Arbitrary Text 01&lt;/crdata_text&gt;<br /> 
</code>


<p>Example: String input parameter example. This example assumes that the variable <strong>aLabel</strong> is specified as an input by the developer when uploading the script. It also assumes that the user of the script, inputs a value for <strong>aLabel</strong> variable when running the script using CRdata. In order to run the script locally, you must somehow input the value of <strong>aLabel</strong> variable otherwise R interpreter will throw an error: </p><br />
<code> 
#&lt;crdata_text&gt;Arbitrary Text 00&lt;/crdata_text&gt;<br /> 
x = c(0,1,2,3,4,5) <br />
#&lt;crdata_object&gt;x&lt;/crdata_object&gt;<br /> 
#&lt;crdata_image&gt;<br />
plot(x, ylab=aLabel) <br />
#&lt;/crdata_image&gt;<br />
#&lt;crdata_text&gt;Arbitrary Text 01&lt;/crdata_text&gt;<br /> 
</code>


<p>Example: Multiple string input parameters. This example assumes that the variables <strong>aLabel</strong>, <strong>anAnimal</strong> are specified in input form by the developer when uploading the script. It also assumes that the user of the script, inputs value for <strong>aLabel</strong>, <strong>anAnimal</strong> variables when running the script using CRdata. In order to run the script locally, you must somehow input the value of <strong>aLabel</strong>, <strong>anAnimal</strong> variables otherwise R interpreter will throw an error: </p><br />
<code> 
#&lt;crdata_text&gt;Arbitrary Text 00&lt;/crdata_text&gt;<br /> 
x = c(0,1,2,3,4,5) <br />
#&lt;crdata_object&gt;x&lt;/crdata_object&gt;<br /> 
z1 = c("The",anAnimal,"runs.") <br />
#&lt;crdata_object&gt;z1&lt;/crdata_object&gt;<br /> 
#&lt;crdata_text&gt;Arbitrary Text 10&lt;/crdata_text&gt;<br /> 
#&lt;crdata_image&gt;<br />
plot(x, ylab=aLabel) <br />
#&lt;/crdata_image&gt;<br />
#&lt;crdata_text&gt;Arbitrary Text 01&lt;/crdata_text&gt;<br /> 
</code>


<p>Example: Switch input parameter. This example assumes that variable <strong>inputName</strong> is specified as a <strong>LIST</strong> type with the comma separated values: "Hamid", "Michael", and "Rajiv". The user of the script will have to choose one of the possible values for <strong>inputName</strong> parameter when executing the script. In order to run the script locally, you must somehow specify the desired value of <strong>inputName</strong> parameter. </p><br />
<code> 
x = switch(inputName, 
               Hamid   = "Hello Hamid",
               Michael = "Hello Michael",
               Rajiv   = "Hello Rajiv"
               ) <br />
#&lt;crdata_object&gt;x&lt;/crdata_object&gt;<br /> 
</code>

<p>Example: Floating point input parameter. This example assumes that the variable <strong>realInput</strong> is specified as a real or floating point type by the developer when uploading the script. It also assumes that the user of the script specifies the runtime value for <strong>realInput</strong>. In order to run the script locally, you must somehow specify the desired value of <strong>realInput</strong> parameter. </p><br />
<code> 
FloatOut <- realInput*1 <br />
#&lt;crdata_object&gt;FloatOut&lt;/crdata_object&gt;<br /> 
</code> 



<p>Example: Reading input from a remote URL rather than a data file.  Adapted example from <a href='http://www.mayin.org/ajayshah/KB/R/html/g1.html'>http://www.mayin.org/ajayshah/KB/R/html/g1.html</a> </p><br />
<code> 
datafilename="http://personality-project.org/R/datasets/psychometrics.prob2.txt" <br />
dataset =read.table(datafilename,header=TRUE)  #read the data file <br />
names(dataset)     #what are the variables? <br />
dataset=dataset[,-1]    #get rid of the ID <br />
n = names(dataset)    #check the names again <br />
#&lt;crdata_object&gt;n&lt;/crdata_object&gt;<br /> 
r = round(cor(dataset),2)    #find the correlation matrix <br />
#&lt;crdata_object&gt;r&lt;/crdata_object&gt;<br /> 
dataset=scale(dataset)    #convert to standardized scores <br />
#&lt;crdata_object&gt;dataset&lt;/crdata_object&gt;<br /> 
dataset=data.frame(dataset) <br />
#&lt;crdata_object&gt;dataset&lt;/crdata_object&gt;<br /> 
</code> 

<p>Example: Error handling in CRdata. In this example, the variable zzz isn't initialized, so printing it even in your local R environment would produce errors. Likewise in CRdata, except the error message is output to the HTML log file. </p><br />
<code> 
#&lt;crdata_title&gt;This is brand new CRDATA run report&lt;/crdata_title&gt;<br /> 
tmp <- as.data.frame(matrix(rnorm(100),ncol=10)) <br />
summary(tmp) <br />
#&lt;crdata_object&gt;tmp&lt;/crdata_object&gt;<br /> 
#&lt;crdata_section/&gt;<br />
#&lt;crdata_image caption="First Graph"> <br />
plot(tmp) <br />
#&lt;/crdata_image&gt; <br />
#&lt;crdata_image caption="Second Graph">plot(tmp) <br />
#&lt;/crdata_image&gt;<br />
print(zzz) <br />
#&lt;crdata_image caption="Third Graph">plot(tmp)&lt;/crdata_image&gt; <br />
#&lt;crdata_image&gt;plot(tmp)&lt;/crdata_image&gt;<br />
</code>

<% end -%>